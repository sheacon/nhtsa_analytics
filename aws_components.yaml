AWSTemplateFormatVersion: "2010-09-09"
Description: NHTSA Complaints Data Pipeline Infrastructure

Parameters:
  BucketName:
    Type: String
    Description: Name of the S3 bucket to store data.
  LambdaExecutionRole:
    Type: String
    Description: IAM Role ARN for Lambda to access AWS services.

Resources:
  # S3 Bucket for Raw and Processed Data
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      VersioningConfiguration:
        Status: Enabled

  # Kinesis Data Stream for Streaming Complaints
  KinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 1

  # Glue Job for Data Transformation
  GlueJob:
    Type: AWS::Glue::Job
    Properties:
      Command:
        Name: glueetl
        ScriptLocation: !Sub "s3://${BucketName}/scripts/glue-etl-script.py"
      Role: !Ref LambdaExecutionRole
      GlueVersion: "3.0"

  # Lambda Function for API Data Ingestion
  DataIngestionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: ingestion-lambda.zip
      Handler: lambda_function.lambda_handler
      Role: !Ref LambdaExecutionRole
      Runtime: python3.9
      Environment:
        Variables:
          KINESIS_STREAM_NAME: !Ref KinesisStream

  # Lambda Trigger to Push Data to Kinesis
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DataIngestionLambda
      Action: lambda:InvokeFunction
      Principal: "apigateway.amazonaws.com"

  # API Gateway for Custom Endpoint
  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "NHTSA Data API"

  APIGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: "data"
      RestApiId: !Ref APIGateway

  APIGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref APIGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DataIngestionLambda.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200

  # SageMaker Model Endpoint
  SageMakerModel:
    Type: AWS::SageMaker::Model
    Properties:
      ExecutionRoleArn: !Ref LambdaExecutionRole
      PrimaryContainer:
        Image: "your-sagemaker-image-uri"
        ModelDataUrl: !Sub "s3://${BucketName}/models/model.tar.gz"
      ModelName: "NHTSA-Complaint-Predictor"

  SageMakerEndpointConfig:
    Type: AWS::SageMaker::EndpointConfig
    Properties:
      ProductionVariants:
        - ModelName: !Ref SageMakerModel
          InitialInstanceCount: 1
          InitialVariantWeight: 1.0
          InstanceType: "ml.m5.large"

  SageMakerEndpoint:
    Type: AWS::SageMaker::Endpoint
    Properties:
      EndpointName: "nhtsa-prediction-endpoint"
      EndpointConfigName: !Ref SageMakerEndpointConfig

Outputs:
  S3Bucket:
    Description: S3 Bucket Name
    Value: !Ref S3Bucket
  KinesisStream:
    Description: Kinesis Stream ARN
    Value: !GetAtt KinesisStream.Arn
  APIGatewayEndpoint:
    Description: API Gateway Endpoint
    Value: !Sub "https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/data"
  SageMakerEndpoint:
    Description: SageMaker Endpoint Name
    Value: !Ref SageMakerEndpoint
