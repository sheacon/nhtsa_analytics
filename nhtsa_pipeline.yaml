AWSTemplateFormatVersion: '2010-09-09'
Resources:

# LAMBDA FUNCTIONS

  TrainLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TrainLambda
      Handler: lambda_train.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Code:
        S3Bucket: nhtsa-analytics
        S3Key: lambda/lambda_train.zip
      Timeout: 300
      MemorySize: 128

  InferenceLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: InferenceLambda
      Handler: lambda_inference.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Code:
        S3Bucket: nhtsa-analytics
        S3Key: lambda/lambda_inference.zip
      Timeout: 300
      MemorySize: 128

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3SageMakerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::nhtsa-analytics/*"
                  - !Sub "arn:aws:s3:::nhtsa-analytics"
              - Effect: Allow
                Action:
                  - sagemaker:CreateTrainingJob
                  - sagemaker:DescribeTrainingJob
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

# SCHEDULE TRAINING JOB

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: WeeklyLambdaTrigger
      ScheduleExpression: cron(0 10 ? * MON *)
      State: ENABLED
      Targets:
        - Id: TrainLambda
          Arn: !GetAtt TrainLambda.Arn

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt TrainLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventRule.Arn

# TRIGGER INFERENCE ON TRAIN COMPLETION

  TrainLambdaCompletionRule:
    Type: AWS::Events::Rule
    Properties:
      Name: TrainLambdaCompletionRule
      EventPattern:
        source:
          - "aws.lambda"
        detail-type:
          - "Lambda Function Invocation Result - Success"
        detail:
          functionName:
            - !Ref TrainLambda
      State: ENABLED
      Targets:
        - Id: InferenceLambda
          Arn: !GetAtt InferenceLambda.Arn

  LambdaInvokePermissionForTrain:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt InferenceLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TrainLambdaCompletionRule.Arn
